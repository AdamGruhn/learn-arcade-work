1. Write code to swap the values 25 and 40.

my_list = [55, 41, 52, 68, 45, 27, 40, 25, 37, 26]
temp = my_list[7]
my_list[7] = my_list[6]
my_list[6] = temp
print(my_list)

2. Write code to swap the values 2 and 27.

my_list = [27, 32, 18,  2, 11, 57, 14, 38, 19, 91]
temp = my_list[3]
my_list[3] = my_list[0]
my_list[0] = temp
print(my_list)

3. Why does the following code not work? Explain it, don't just list working code.

my_list = [70, 32, 98, 88, 92, 36, 81, 83, 87, 66]
temp = my_list[0]
my_list[1] = my_list[0]
my_list[0] = temp

The code wants to switch the 70 and 32, but it is saving the 70,
then changing the 32 to 70, losing the 32 in the process.

4. Show how the following numbers can be sorted using the selection sort.
Show the numbers after each iteration of the outer loop, similar to what is shown in the book.
I am NOT looking for a copy of the code to do the sort.
If you include any code for problems 4-7 you are doing it wrong.

97  74  8   98  47  62  12  11  0   60
0   74  8   98  47  62  12  11  97  60
0   8   74  98  47  62  12  11  97  60
0   8   11  98  47  62  12  74  97  60
0   8   11  12  47  62  98  74  97  60
0   8   11  12  47  62  98  74  97  60
0   8   11  12  47  60  98  74  97  62
0   8   11  12  47  60  62  74  97  98
0   8   11  12  47  60  62  74  97  98
0   8   11  12  47  60  62  74  97  98
0   8   11  12  47  60  62  74  97  98

5. Show how the following numbers can be sorted using the selection sort:

74  92  18  47  40  58  0   36  29  25
0   92  18  47  40  58  74  36  29  25
0   18  92  47  40  58  74  36  29  25
0   18  25  47  40  58  74  36  29  92
0   18  25  29  40  58  74  36  47  92
0   18  25  29  36  58  74  40  47  92
0   18  25  29  36  40  74  58  47  92
0   18  25  29  36  40  47  58  74  92
0   18  25  29  36  40  47  58  74  92
0   18  25  29  36  40  47  58  74  92
0   18  25  29  36  40  47  58  74  92

6. Show how the following numbers can be sorted using the INSERTION sort.
(Note: If you think the 0 gets immediately sorted into position, you are doing it wrong.
Go back and re-read how this sort works.)

74  92  18  47  40  58  0   36  29  25
74  92  18  47  40  58  0   36  29  25
18  74  92  47  40  58  0   36  29  25
18  47  74  92  40  58  0   36  29  25
18  40  47  74  92  58  0   36  29  25
18  40  47  58  74  92  0   36  29  25
0   18  40  47  58  74  92  36  29  25
0   18  36  40  47  58  74  92  29  25
0   18  29  36  40  47  58  74  92  25
0   18  25  29  36  40  47  58  74  92

7. Show how the following numbers can be sorted using the insertion sort:

37  11  14  50  24  7   17  88  99  9
11  37  14  50  24  7   17  88  99  9
11  14  37  50  24  7   17  88  99  9
11  14  37  50  24  7   17  88  99  9
11  14  24  37  50  7   17  88  99  9
7   11  14  24  37  50  17  88  99  9
7   11  14  17  24  37  50  88  99  9
7   11  14  17  24  37  50  88  99  9
7   11  14  17  24  37  50  88  99  9
7   9   11  14  17  24  37  50  88  99

8. Explain what `min_pos` does in the selection sort.

`min_pos` holds the value of the smallest number found in the list after
wherever the search is starting. It also checks for if any numbers after the current list position
is smaller than it so that they can be swapped.

9. Explain what `cur_pos` does in the selection sort.

Current position is the starting point for the next iteration of the search.
That is, if it is the second time going through the list looking for the smallest number,
`cur_pos` will be my_list[1], the second item in the list.

10. Explain what `scan_pos` does in the selection sort.

`scan_pos` is every item after `cur_pos` that is being tested against `min_pos`
to see if it is the smallest in the list and needs to be switched to the front of the list

11. Explain what `key_pos` and `key_value` are in the insertion sort.

`key_value` is the starting value of the search, and `key_pos` is the index number of that value

12. Explain `scan_pos` in the insertion sort.

Scans for the values to insert going from right to left

13. Look at the example sort program at the very end of this chapter:
Modify the sorts to print the number of times the inside loop is run,
 and the number of times the outside loop is run.
 Modify the program to work with a list of 100.
 Paste the code you used here. Run the program and list the numbers you got here.
 (DON'T FORGET TO INCLUDE THE RESULTS!)
 Inside loop for selection sort should be about 5,000, and insertion sort 2,500.
 Double-check if you don't get numbers close to these.

import random

list_1 = []
for i in range(100):
    list_1.append(random.randrange(100))

list_2 = []
for i in range(100):
    list_2.append(random.randrange(100))


def selection_sort(my_list):
    """ Sort a list using the selection sort """
    print(my_list)
    runs_inside = 0
    runs_outside = 0
    # Loop through the entire array
    for cur_pos in range(len(my_list)):

        # Find the position that has the smallest number
        # Start with the current position
        min_pos = cur_pos

        # Scan left to right (end of the list)
        for scan_pos in range(cur_pos + 1, len(my_list)):

            # Is this position smallest?
            if my_list[scan_pos] < my_list[min_pos]:

                # It is, mark this position as the smallest
                min_pos = scan_pos
            runs_inside += 1

        # Swap the two values
        temp = my_list[min_pos]
        my_list[min_pos] = my_list[cur_pos]
        my_list[cur_pos] = temp
        runs_outside += 1
    print(runs_outside)
    print(runs_inside)


def insertion_sort(my_list):
    """ Sort a list using the insertion sort """
    print(my_list)
    # Start at the second element (pos 1).
    # Use this element to insert into the
    # list.
    runs_inside = 1
    runs_outside = 0
    for key_pos in range(1, len(my_list)):

        # Get the value of the element to insert
        key_value = my_list[key_pos]

        # Scan from right to the left (start of list)
        scan_pos = key_pos - 1

        # Loop each element, moving them up until
        # we reach the position the
        while (scan_pos >= 0) and (my_list[scan_pos] > key_value):
            my_list[scan_pos + 1] = my_list[scan_pos]
            scan_pos = scan_pos - 1
            runs_inside += 1

        # Everything's been moved out of the way, insert
        # the key into the correct location
        my_list[scan_pos + 1] = key_value
        runs_outside += 1
    print(runs_outside)
    print(runs_inside)


selection_sort(list_1)
insertion_sort(list_2)

Selection sort had 100 runs of the outside loop and 4950 runs of the inside loop
Insertion sort had 99 runs of the outside loop and 2639 runs of the inside loop